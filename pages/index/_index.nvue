<template>
  <view class="content">
    <view class="title">uQRCode二维码生成</view>

    <view class="qrcode-box">
      <uqrcode ref="uqrcode" />
      <text class="text">nvue</text>
    </view>
    <input class="input" v-model="qrcodeTextRandom" placeholder="点击下方按钮生成自定义二维码" />
    <button class="button" type="primary" @tap="make">生成随机内容二维码</button>
    <button class="button" type="primary" @tap="save">保存二维码</button>
  </view>
</template>

<script>
  export default {
    data() {
      return {
        qrcodeSize: 256,
        qrcodeTextRandom: '',
        qrcodeModules: []
      }
    },
    onReady() {
      this.make()
    },
    methods: {
      make() {
        this.qrcodeTextRandom = this.uuid()
        // view
        uni.showLoading({
          mask: true,
          title: '生成中...'
        })
        this.$refs
          .uqrcode
          .make({
            mode: 'view',
            size: this.qrcodeSize,
            text: this.qrcodeTextRandom
          })
        uni.hideLoading()
      },
      save() {
        uni.showToast({
          icon: 'none',
          title: 'nvue暂不支持，只能通过截图保存😅'
        })
      },
      uuid(len = 32, firstU = true, radix = null) {
        let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
        let uuid = [];
        radix = radix || chars.length;

        if (len) {
          // 如果指定uuid长度,只是取随机的字符,0|x为位运算,能去掉x的小数位,返回整数位
          for (let i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];
        } else {
          let r;
          // rfc4122标准要求返回的uuid中,某些位为固定的字符
          uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
          uuid[14] = '4';

          for (let i = 0; i < 36; i++) {
            if (!uuid[i]) {
              r = 0 | Math.random() * 16;
              uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
            }
          }
        }

        // 移除第一个字符,并用u替代,因为第一个字符为数值时,该guuid不能用作id或者class
        if (firstU) {
          uuid.shift();
          return 'u' + uuid.join('');
        } else {
          return uuid.join('');
        }
      }
    }
  }
</script>

<style>
  /* #ifndef APP-NVUE */
  page {
    background-color: #f0f0f0;
  }

  /* #endif */

  .content {
    /* #ifndef APP-NVUE */
    display: flex;
    /* #endif */
    flex-direction: column;
    justify-content: center;
    align-items: center;
    margin-top: 44px;
  }

  .title {
    /* #ifndef APP-NVUE */
    display: flex;
    /* #endif */
    flex-direction: column;
    align-items: center;
    margin-top: 50rpx;
    font-size: 36rpx;
    color: #666666;
  }

  .qrcode-box,
  .image-box,
  .canvas-box {
    /* #ifndef APP-NVUE */
    display: flex;
    /* #endif */
    flex-direction: column;
    align-items: center;
    margin-top: 50rpx;
  }

  .text {
    /* #ifndef APP-NVUE */
    display: block;
    /* #endif */
    margin-top: 12rpx;
    font-size: 34rpx;
  }

  .image-box {
    width: 400rpx;
    margin-top: 50rpx;
  }

  .image {
    /* #ifndef APP-NVUE */
    display: block;
    /* #endif */
    width: 400rpx;
    height: 400rpx;
  }

  .input {
    width: 600rpx;
    height: 40px;
    margin: 50rpx 0;
    padding: 0 20rpx;
    border: 1px solid #b0b0b0;
    border-radius: 5px;
    background-color: #ffffff;
  }

  .button {
    width: 690rpx;
    margin: 10rpx;
  }

  .button:last-child {
    margin-bottom: 50rpx;
  }

  .component {
    margin-top: 30rpx;
    text-align: center;
  }

  .component-title {
    /* #ifndef APP-NVUE */
    display: inline-block;
    /* #endif */
    padding: 20rpx 40rpx;
    border-bottom: 2px solid #d8d8d8;
    font-size: 36rpx;
  }

  .component-buttons {
    margin-top: 30rpx;
  }
</style>
